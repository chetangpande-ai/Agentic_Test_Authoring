package com.automation.library;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.List;

public class WebLibrary {

    private WebDriver driver;
    private WebDriverWait wait;

    /**
     * Launch browser
     * @param browserName - Chrome, Firefox, Edge
     */
    public void launchBrowser(String browserName) {
        switch (browserName.toLowerCase()) {
            case "chrome":
                driver = new ChromeDriver();
                break;
            case "firefox":
                driver = new FirefoxDriver();
                break;
            case "edge":
                driver = new EdgeDriver();
                break;
            default:
                throw new IllegalArgumentException("Invalid browser name: " + browserName);
        }
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver, Duration.ofSeconds(20));
    }

    /**
     * Open Application URL
     */
    public void openUrl(String url) {
        driver.get(url);
    }

    /**
     * Click element
     */
    public void click(By locator) {
        wait.until(ExpectedConditions.elementToBeClickable(locator)).click();
    }

    /**
     * Send keys to element
     */
    public void sendKeys(By locator, String text) {
        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        element.clear();
        element.sendKeys(text);
    }

    /**
     * Get text from element
     */
    public String getText(By locator) {
        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator)).getText();
    }

    /**
     * Get attribute value
     */
    public String getAttribute(By locator, String attribute) {
        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator)).getAttribute(attribute);
    }

    /**
     * Select dropdown by visible text
     */
    public void selectByVisibleText(By locator, String visibleText) {
        WebElement dropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        new Select(dropdown).selectByVisibleText(visibleText);
    }

    /**
     * Select dropdown by value
     */
    public void selectByValue(By locator, String value) {
        WebElement dropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        new Select(dropdown).selectByValue(value);
    }

    /**
     * Select dropdown by index
     */
    public void selectByIndex(By locator, int index) {
        WebElement dropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        new Select(dropdown).selectByIndex(index);
    }

    /**
     * Mouse hover
     */
    public void mouseHover(By locator) {
        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        new Actions(driver).moveToElement(element).perform();
    }

    /**
     * Double click
     */
    public void doubleClick(By locator) {
        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(locator));
        new Actions(driver).doubleClick(element).perform();
    }

    /**
     * Right click
     */
    public void rightClick(By locator) {
        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(locator));
        new Actions(driver).contextClick(element).perform();
    }

    /**
     * Switch to frame by index
     */
    public void switchToFrame(int index) {
        driver.switchTo().frame(index);
    }

    /**
     * Switch to frame by locator
     */
    public void switchToFrame(By locator) {
        WebElement frameElement = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        driver.switchTo().frame(frameElement);
    }

    /**
     * Switch back to default content
     */
    public void switchToDefaultContent() {
        driver.switchTo().defaultContent();
    }

    /**
     * Handle alert - Accept
     */
    public void acceptAlert() {
        wait.until(ExpectedConditions.alertIsPresent()).accept();
    }

    /**
     * Handle alert - Dismiss
     */
    public void dismissAlert() {
        wait.until(ExpectedConditions.alertIsPresent()).dismiss();
    }

    /**
     * Get alert text
     */
    public String getAlertText() {
        return wait.until(ExpectedConditions.alertIsPresent()).getText();
    }

    /**
     * Scroll to element
     */
    public void scrollToElement(By locator) {
        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
    }

    /**
     * Take screenshot
     */
    public byte[] takeScreenshot() {
        return ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
    }

    /**
     * Close current browser
     */
    public void closeBrowser() {
        if (driver != null) {
            driver.close();
        }
    }

    /**
     * Quit browser (close all windows)
     */
    public void quitBrowser() {
        if (driver != null) {
            driver.quit();
        }
    }
}
